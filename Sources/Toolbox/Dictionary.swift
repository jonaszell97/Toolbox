
import Foundation

public extension Dictionary {
    /// This method allows in-place modification of a dictionary's value at a given key, even if there is no value for the given key yet.
    ///
    /// - Parameters:
    ///   - key: The key of the dictionary entry to modify.
    ///   - defaultValue: If there is no value with the given `key`, the `defaultValue` will be inserted.
    ///   - modify: Closure called on either the existing value or the `defaultValue` that can be used to modify it in place.
    ///
    /// - Throws: Rethrows any error thrown by the `modify` closure.
    mutating func modify(key: Key, defaultValue: @autoclosure () -> Value, modify: (inout Value) throws -> Void) rethrows {
        if var value = self[key] {
            try modify(&value)
            self[key] = value
        }
        else {
            var value = defaultValue()
            try modify(&value)
            
            self[key] = value
        }
    }
}

public extension Dictionary where Value: AdditiveArithmetic {
    /// Add the values in the given dictionary to the values of another dictionary with the same keys.
    ///
    /// If `self` does not contain a value with a key present in `other`, the value will be copied without modification.
    /// If both dictionaries contain a key, the respective values will be added and the sum placed in `self` at that key.
    ///
    /// - Parameter other: The dictionay whose values should be added to the values of `self`.
    mutating func add(valuesOf other: Self) {
        let keys = other.keys.map { $0 }
        for key in keys {
            guard let otherValue = other[key] else {
                continue
            }
            
            if let value = self[key] {
                self[key] = value + otherValue
            }
            else {
                self[key] = otherValue
            }
        }
    }
    
    /// Shortcut method that groups values by adding them.
    ///
    /// Example usage:
    ///
    ///     var populations = ["Berlin": 3_500_000, "Cologne": 1_100_000, "New York City": 8_000_000]
    ///     print(populations.grouped { country(of: $0) })
    ///     // Prints "["Germany": 4_600_000, "United States": 8_000_000]"
    ///
    /// - Parameter transformKey: Generates a new key from an existing one.
    /// - Returns: A new dictionary containing an entry for each key generated by `transformKey`. Values with the same
    /// new key are combined using addition.
    func grouped<NewKey>(by transformKey: (Key) -> NewKey) -> [NewKey: Value]
        where NewKey: Hashable
    {
        grouped(by: transformKey) { $0 + $1 }
    }
}

public extension Dictionary {
    /// Group the items of this dictionary by generating a new key for each item and combining values with the same key using a custom closure.
    ///
    /// - Parameters:
    ///   - transformKey: Generates a new key from an existing one.
    ///   - combineValues: Closure used to combine two values with the same key.
    /// - Returns: A new dictionary containing an entry for each key generated by `transformKey`. Values with the same
    /// new key are combined using the `combineValues` closure.
    func grouped<NewKey>(by transformKey: (Key) -> NewKey, combineValues: (Value, Value) -> Value) -> [NewKey: Value]
        where NewKey: Hashable
    {
        var dict = [NewKey: Value]()
        for (key, value) in self {
            let newKey = transformKey(key)
            
            if let existingValue = dict[newKey] {
                dict[newKey] = combineValues(existingValue, value)
            }
            else {
                dict[newKey] = value
            }
        }
        
        return dict
    }
}
